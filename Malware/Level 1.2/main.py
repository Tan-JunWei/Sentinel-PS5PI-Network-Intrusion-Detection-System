from scapy.all import *
from datetime import datetime, timedelta
import platform


# Threat intelligence
# ADD YOUR C2 SERVER IPS HERE
MALICIOUS_IPS = ["4.2.2.2", "virus.com"]

# dict to track alerts
alert_history = {}
# set a timeout to ignore repeated alerts within 10s
REPEATED_ALERT_TIMEOUT = timedelta(seconds=10)


def get_interface():
    """
    checks for the OS and returns the correct network interface
    """
    print("Checking for OS...")
    if platform.system() == "Windows":
        print("OS is Windows -> VMware Network Adapter VMnet1")
        return "VMware Network Adapter VMnet1"
    elif platform.system() == "Darwin":  # macOS is identified as 'Darwin'
        print("OS is Mac -> vmenet3")
        return "vmenet3"
    else:
        raise RuntimeError("Only supports windows/mac")


def alert(msg):
    """
    alerts function to check if the alert has been logged before within the timeout
    """
    # ignore the alert if it has already been logged before timeout
    if (msg in alert_history) and (
        alert_history[msg] + REPEATED_ALERT_TIMEOUT > datetime.now()
    ):
        return
    # log the alert's msg and timestamp
    alert_history[msg] = datetime.now()
    print(f"*ALERT* {msg}")


def detect_malicious_ip(packet):
    """
    Detection 1.1
    Detect communication with known malicious IPs.
    """
    # Malicious trigger should trigger an alert on the NIDS
    # Non-malicious traffic should not trigger an alert
    source_ip = packet[IP].src
    destination_ip = packet[IP].dst
    if destination_ip in MALICIOUS_IPS or source_ip in MALICIOUS_IPS:
        alert(f"Communication between malicious IP {source_ip} and {destination_ip}")


def detectmaliciousdns(packet):
    """
    Detection 1.2
    Detect DNS queries to known malicious domains.
    """
    # Malicious trigger should trigger an alert on the NIDS
    # Non-malicious traffic should not trigger an alert
    qname = packet[DNS].qd.qname.decode().rstrip('.')
    source_ip = packet[IP].src
    if qname in MALICIOUS_IPS:
        alert(f"DNS query for malicious domain {qname} from {source_ip}")


def detect_malicious_traffic(packet):
    """
    function to detect malicious network activity
    """
    try:
        # check if packet is DNS query
        if packet.haslayer(DNS) and packet[DNS].qr == 0:
            detectmaliciousdns(packet)
        # check if the packet has IP layer
        if packet.haslayer(IP):
            detect_malicious_ip(packet)
    # print any exceptions and continue (to prevent crashing)
    except Exception as e:
        print(f"Error: {e}")


def main():
    print("Starting NIDS!")
    network_interface = get_interface()
    print(f"Sniffing on interface: {network_interface}")
    sniff(prn=detect_malicious_traffic, iface=network_interface)


if __name__ == "__main__":
    main()