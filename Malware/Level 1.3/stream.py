import hashlib
from scapy.all import IP, TCP, Raw

class Stream:
    def __init__(self, stream_id, alert_fn=None, malware_hashes=None):
        self.stream_id = stream_id
        self.packets = []  # store all packets of this stream (both directions)
        self.alert = alert_fn
        self.known_hashes = malware_hashes or {}
        print(f"[+] Tracking new stream: {self.stream_id}")

    def process_packet(self, packet):
        # Only consider packets with Raw payload and TCP/IP layers
        if Raw in packet and TCP in packet and IP in packet:
            self.packets.append(packet)

        # Check TCP flags for FIN (0x01) or RST (0x04) to end stream
        flags = packet[TCP].flags
        if flags & 0x01 or flags & 0x04:
            print(f"[x] Ending stream {self.stream_id}")
            full_data = self.reassemble_stream()
            print(f"Stream data length: {len(full_data)} bytes")

            try:
                http_text = full_data.decode(errors='ignore')
                print(f"HTTP Text:\n{http_text}")

                if "HTTP" in http_text or "GET" in http_text or "POST" in http_text:
                    parts = http_text.split("\r\n\r\n", 1)
                    if len(parts) == 2:
                        headers, body = parts
                    else:
                        headers, body = http_text, ""
                    body_bytes = body.encode("utf-8", errors="ignore")
                    print(f"Body bytes length: {len(body_bytes)}")
                    body_hash = hashlib.sha1(body_bytes).hexdigest()
                    print(f"\nHTTP Body SHA-1 Hash: {body_hash}")

                    # Check against known malware hashes
                    for malware_name, hashes in self.known_hashes.items():
                        if body_hash in hashes:
                            if self.alert:
                                self.alert(
                                    f"Malware detected in HTTP download! "
                                    f"Client: {packet[IP].src}; Server: {packet[IP].dst}; "
                                    f"Hash: {body_hash} ({malware_name})"
                                )
            except Exception as e:
                print(f"Could not decode HTTP data: {e}")

            return True
        return False

    def reassemble_stream(self):
        # Sort packets by TCP sequence number to reassemble in correct order
        packets = sorted(self.packets, key=lambda p: p[TCP].seq)
        data = b""
        for pkt in packets:
            if Raw in pkt:
                data += bytes(pkt[Raw].load)
        return data
